<controls:MetroWindow x:Class="AccommodationApplication.Editing.EditWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AccommodationApplication.Login"
        xmlns:vm="clr-namespace:AccommodationApplication.ViewModels"              
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        mc:Ignorable="d"
        Title="Edytuj" Height="600" Width="600"
        WindowStartupLocation="CenterScreen" ResizeMode="NoResize"
        BorderThickness="1" BorderBrush="Green" TitleCaps="False" Icon="../Resources/QuickAccommodationIcon.png">

    <Grid>
       
        <Grid.Resources>

            <!--ustawianie dostępności przycisku do edycji, jeśli nie ma żadnych błędów-->
            
            <Style TargetType="{x:Type Button}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=acc, Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=str,  Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=loc,   Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=cit,   Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=pos, Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=d1,  Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=d2,  Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=num, Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=pri,  Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=dis,  Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>

                </Style.Triggers>
            </Style>

            
          
            <Style TargetType="{x:Type TextBox}">
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True" >
                        <!--ustawianie ToolTipa do pokazywania zawartośći błędu-->
                        <Setter Property="ToolTip" 
   Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Trigger>
                </Style.Triggers>
                <!-- ustawianie wyglądu TextBoxa dla błędnych danych-->
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <DockPanel DockPanel.Dock="Right">
                                <AdornedElementPlaceholder>
                                    <Border BorderBrush="Red" BorderThickness="1" />
                                </AdornedElementPlaceholder>
                                <TextBlock Margin="1" Text="*" Foreground="Red" 
                                           ToolTip="{Binding Path=AdornedElement.ToolTip,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Adorner}}}"/>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <!--Główny widok dla edycji ofert"-->
        
        <GroupBox Header="NAZWA I ADRES: " Grid.Row="0" >

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <TextBlock Text="Nazwa" Grid.Row="0" Grid.Column="0" Margin="4 4 4 4"/>
                <TextBlock Text="Ulica" Grid.Row="1" Grid.Column="0" Margin="4 4 4 4" />
                <TextBlock Text="Numer domu" Grid.Row="2" Grid.Column="0" Margin="4 4 4 4"/>
                <TextBlock Text="Kod pocztowy" Grid.Row="3" Grid.Column="0" Margin="4 4 4 4"/>
                <TextBlock Text="Miejscowosć" Grid.Row="4" Grid.Column="0" Margin="4 4 4 4"/>
                <TextBox Margin="4 4 4 4" Name ="acc" Grid.Column="1" Grid.Row="0"  Text="{Binding Path=AccommodationName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBox Margin="4 4 4 4" Name ="str" Grid.Column="1" Grid.Row="1"  Text="{Binding Path=Street, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBox Margin="4 4 4 4" Name ="loc" Grid.Column="1" Grid.Row="2"  Text="{Binding Path=LocalNumber , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBox Margin="4 4 4 4" Name ="pos" Grid.Column="1" Grid.Row="3"  Text="{Binding Path=PostalCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBox Margin="4 4 4 4" Name ="cit" Grid.Column="1" Grid.Row="4"  Text="{Binding Path=City, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
            </Grid>
        </GroupBox>

        <GroupBox Header="TERMIN: " Grid.Row="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="0.6*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <TextBlock Text="Od:" Grid.Row="0" Grid.Column="0" />
                <TextBlock Text="Do: " Grid.Row="0" Grid.Column="1" />
                <DatePicker Name="d1" Grid.Column="0" Grid.Row="1" SelectedDate="{Binding Path=StartDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <DatePicker Name="d2" Grid.Column="1" Grid.Row="1" SelectedDate="{Binding Path=EndDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
            </Grid>
        </GroupBox>

        <GroupBox Header="DODATKOWE INFORMACJE: " Grid.Row="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TextBlock Margin="4 4 4 4" Text="Liczba wolnych miejsc: " Grid.Row="0" Grid.Column="0" />
                <TextBox Margin="4 4 4 4" Name="num" Grid.Column="1" Grid.Row="0" Text="{Binding Path=AvailiableVacanciesNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBlock Margin="4 4 4 4" Text="Cena: " Grid.Row="1" Grid.Column="0" />
                <TextBox Margin="4 4 4 4" Name="pri" Grid.Row="1" Grid.Column="1" Text="{Binding Path=Price, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
                <TextBlock Margin="4 4 4 4" Text="Opis: " Grid.Row="2" Grid.Column="0" />
                <TextBox Margin="4 4 4 4" Name="dis" Grid.Column="1" Grid.Row="2" Text="{Binding Path=Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                    ValidatesOnDataErrors=True}"/>
            </Grid>
        </GroupBox>

        <!-- przyscisk do aktualizacji oferty, wiązanie z właściwością w EditWindowViewModel -->
        <Button Content="Aktualizuj ofertę" Grid.Row="3" Grid.ColumnSpan="2" Width="100" Height="40" 
                Command="{Binding UpDateCommand}" 
                CommandParameter="" />
    </Grid>
</controls:MetroWindow>
